import streamlit as st
from utils import utils_hackathon as uh
import pandas as pd

st.set_page_config(page_title="ClimateViz by Axionable", layout="wide")

st.title("ClimateViz by Axionable - Espace de d√©mo")

c = st.expander("A propos de cet outil")
st.write("""  

Vous souhaitez mesurer l‚Äôimpact du climat (et donc du changement climatique) sur votre activit√© ? Mesurer la corr√©lation entre l‚Äôindicateur climatique de votre choix et un indicateur m√©tier de votre choix, et obtenez une premi√®re estimation de l‚Äôimpact du changement climatique sur votre activit√©.

""")
#Cette page a pour objectif d'apporter une visualisation des pr√©visions d'une variable m√©tier sp√©cifique sur le long terme √† l'aide d'un indicateur climatique choisi. 
#
#Vous avez la possibilit√© de personnaliser l'indicateur climatique sur lequel vous souhaitez baser vos pr√©visions en s√©lectionnant le type de sc√©nario climatique ainsi que la fen√™tre temporelle. 
#
#Pour utiliser notre outil de pr√©vision, veuillez fournir un fichier CSV contenant des donn√©es historiques sur la variable m√©tier. Ce fichier doit comporter une colonne contenant les valeurs de la variable m√©tier ainsi qu'un historique pr√©cis sur une plage temporelle donn√©e (de l'ann√©e X √† l'ann√©e Y) avec une fr√©quence annuelle.
#
#Nos pr√©visions sont calcul√©es gr√¢ce √† l'utilisation conjointe des donn√©es climatiques de M√©t√©o France et de DRIAS, ainsi que de l'indicateur choisi, en utilisant des mod√®les de machine learning.
#
#Explorez les diff√©rentes options disponibles et obtenez des pr√©visions personnalis√©es pour prendre des d√©cisions √©clair√©es dans votre domaine d'activit√©.
#""")


#- **Objectif de l'outil** : L'outil permet aux utilisateurs d'√©valuer les risque physiques associ√©s √† diff√©rents actifs en analysant leurs vuln√©rabilit√©s et expositions aux al√©as climatiques
#- **Comment √ßa fonctionne** : Les utilisateurs chargent un fichier excel sur les actifs analys√©s qui inclut :
#    - la valeur mon√©taire
#    - l'exposition aux al√©as climatiques selon plusieurs sc√©narios climatiques et horizons temporels
#    - la vuln√©rabilit√© des sites  
#
#L'exposition et la vuln√©rabilit√© permet de d√©terminer un score d'exposition √† un risque physique entre faible et √©lev√©. Les actifs avec un score √©lev√©s sont consid√©r√©s comme √† risques.  
#           
#- **Donn√©es utilis√©es**: Les analyses sont bas√©es sur une combinaison d'analyse m√©tier (vuln√©rabilit√© des sites et valeurs mon√©taires) et d'indicateurs climatiques (exposition).



dict_indicateurs = {"T_MAX": "Temperature maximale"}
c1, c2 = st.columns(2)
error_date = False

ctn = c1.expander("Mon indicateur climatique √† corr√©ler")
col11, col12 = ctn.columns(2)


commune = col11.selectbox(
    "Choississez votre commune",
    ["Commune", "Marseille", "Montpellier", "Niort"],
    index=None,
)
scenario = col12.selectbox(
    "Sc√©nario Climatique", [ "RCP4.5", "RCP8.5"], index=None
)
if scenario:
    df_drias = pd.read_csv(f"data/drias_montpellier_{scenario}_df.csv")
    df_drias["T_Q"] = df_drias["T_Q"] - 273.15
    df_mf = pd.read_csv("data/mf_montpellier.csv")
    df_mf.drop(columns="Unnamed:0", errors="ignore", inplace=True)

ind = col11.selectbox(
    "Choississez un indicateur",
    [
        "Temp√©rature Max",
        "Temp√©rature Moyenne",
        "Temp√©rature Min",
        "Temp√©rature de jours qui d√©passent une temp√©rature seuil",
    ],
    index=None,
)
date_perso = col11.checkbox(
    "Je souhaite personnaliser la p√©riode consid√©r√©e pour mon indicateur"
)
# default date
periode_start = "01-01"
periode_end = "12-31"

# selection date
if date_perso:
    exc1 = c1.expander("S√©lection Date Personnalis√©e")
    exc11, exc12 = exc1.columns(2)
    periode_start = exc11.text_input("Date de D√©part", "01-01")
    periode_end = exc12.text_input("Date de Fin", "12-31")
    if periode_start and periode_end:
        if not (uh.validate_date(periode_start) and uh.validate_date(periode_end)):
            st.error("Date invalide, entrez une date au format MM-JJ")
            error_date = True
        else:
            error_date = False

dict_indicateurs = {
    "T_MAX": "Temperature maximale",
    "T_MIN": "Temp√©rature minimale",
    "T_MOYENNE": "Temp√©rature moyenne",
    "nb_episodes": "Nombre d'√©pisodes",
}

# Temperature Seuil
if (
    ind == "Temp√©rature de jours qui d√©passent une temp√©rature seuil"
    and scenario
    and commune
    and not error_date
):
    seuil = col12.number_input(
        "S√©l√©ctionner une temp√©rature seuil (¬∞C)", -10, 45, value=25
    )
    choix_seuil = col12.radio(
        "Choix seuil",
        ["Temp√©rature Sup√©rieure", "Temp√©rature Inf√©rieure"],
    )
    dict_indicateurs["Nb_jours_max"] = (
        f"Nombre de jours o√π la temp√©rature est > √† {seuil} ¬∞C ",
    )
    if choix_seuil == "Temp√©rature Inf√©rieure":
        signe = "-"
        text = f"Nombre de jours qui sous en-dessous  d'une temp√©rature de {seuil} ¬∞C "

    else:
        signe = "+"
        text = f"Nombre de jours qui d√©passent une temp√©rature de {seuil} ¬∞C "

    dict_indicateurs["Nb_jours_max"] = text
    ind = "Nb_jours_max"
    fig, df_d, df_m = uh.main_indic_nb_jour_consecutif(
        df_mf,
        df_drias,
        seuil,
        periode_start,
        periode_end,
        dict_indicateurs,
        signe,
    )

# Construction indicateurr temp moy, max, min
if (
    ind in ["Temp√©rature Max", "Temp√©rature Moyenne", "Temp√©rature Min"]
    and scenario
    and commune
    and not error_date
):
    ind_dict = {
        "Temp√©rature Max": "T_MAX",
        "Temp√©rature Min": "T_MIN",
        "Temp√©rature Moyenne": "T_MOYENNE",
    }
    ind = ind_dict[ind]

    fig, df_d, df_m = uh.main_indic_temperature(
        df_mf=df_mf,
        df_drias=df_drias,
        indicateur=ind,
        periode_start=periode_start,
        periode_end=periode_end,
        dict_indicateurs=dict_indicateurs,
    )



col1, col2 = st.columns(2)

with col1:
    nom_var_metier = st.text_input("Nom indicateur m√©tier")

with col2:
    unite_var_metier = st.text_input("Unit√© de mesure")


col3, col4 = st.columns(2)
with col3 :
    uploaded_file = st.file_uploader(
        "D√©posez un fichier CSV avec votre indicateur m√©tier √† corr√©ler", type=["csv"]
    )

with col4: 
    st.write("\n")
    st.write("Le fichier CSV doit comporter une colonne contenant les valeurs de l'indicateur m√©tier ainsi qu'un historique pr√©cis sur une plage temporelle donn√©e (de l'ann√©e X √† l'ann√©e Y) avec une fr√©quence annuelle.")
    csv_download_link = st.download_button(
    label="T√©l√©charger un exemple",
    data=uh.download_csv(),
    file_name='qualite_vin.csv',
    mime='text/csv'
    )

if uploaded_file is not None:
    df_metier = pd.read_csv(uploaded_file)
    try:
        df_m.rename(columns={ind: "index"}, inplace=True)
        df_d.rename(columns={ind: "index"}, inplace=True)
    except:
        st.warning('Veuillez s√©lectionner un indicateur')

    df_m = df_m[["Ann√©e", "index"]]
    df_d = df_d[["Ann√©e", "index"]]

    print(df_metier.head(1))
    print(df_m.head(1))


    col_graphique, col_description = st.columns([2, 1])
    corr = uh.compute_correlation(df_m, df_metier)
        
    with col_graphique:
        image1 = uh.show_serie_tempo(df_metier, df_m, nom_var_metier, " ¬∞C", "Note", dict_indicateurs[ind])
        st.plotly_chart(image1)

    nom_var_metier = nom_var_metier.lower()
    df95, df30, df50 = uh.main_inspect_csv(df_metier, df_m, df_d)
    if "jours" in dict_indicateurs[ind]:
        nom_indi_mf = "du " + dict_indicateurs[ind]
    else:
        nom_indi_mf = "de la " + dict_indicateurs[ind]

    with col_description:
        st.write("Information sur le graphique :")
        
        st.write(f"Ce graphique repr√©sente une visualisation de l'√©volution de {nom_var_metier} et {nom_indi_mf.lower()} en fonction des ann√©es")
        st.info(f"La corr√©lation entre l'indicateur s√©lectionn√© et la variable m√©tier est de **{int(corr*100)}** %", icon="üìà")
        #st.metric("Corr√©lation entre l'indicateur s√©lectionn√© et la variable m√©tier", str(int(corr*100))+"%")
        st.caption("Corr√©lation : Mesure statistique qui exprime comment deux variables sont li√©es. Ici, le coefficient lin√©aire de Pearson a √©t√© utilis√©.")

    st.markdown("---")
    col_graphique, col_description = st.columns([2, 1])

    with col_graphique:
        image = uh.show_box_plot(df95, df30, df50, scenario, nom_var_metier, unite_var_metier)

        st.plotly_chart(image)

    with col_description:
        st.write("Information sur le graphique :")
        st.write(f"Ce graphique repr√©sente une visualisation des pr√©visions de la {nom_var_metier} pour trois horizons g√©n√©r√©s √† partir d'un mod√®le de machine learning (un arbre de d√©cision) qui se base sur l'indicateur climatique selectionn√©.")
        st.write(f"Cette repr√©sentation permet de visualiser les variations de la {nom_var_metier} en fonction du sc√©nario climatique {scenario} et de mieux comprendre son impact potentiel sur cette variable sp√©cifique.")

    
c = st.expander("A propos de ce site")

c.markdown(uh.text_explication_fin)


